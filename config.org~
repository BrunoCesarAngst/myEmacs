#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Iniciando!

#+begin_src emacs-lisp

    ;; Atenção: init.el é agora gerado a partir de Emacs.org.
    ;; Por favor, edite esse ficheiro em Emacs e init.el serão gerados automaticamente!

    ;; Provavelmente terá de ajustar este tamanho de fonte para o seu sistema!
    (defvar default-font-size 90)
    (defvar default-variable-font-size 90)

    ;; Torna transparente
    (defvar frame-transparency '(90 . 90))

#+end_src

* Dicas de utilização

Neste documento há links em muitos locais que o levam à documentação para os vários pacotes.  Se estiver vendo este arquivo no Emacs, pode colocar o seu cursor num link e premir =C-c C-o= ou correr =M-x org-open-at-point= para abrir o link no seu navegador web.

* Startup Performance

#+begin_src emacs-lisp

  ;; O valor por padrão é de 800 kilobytes.  Medido em bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs carregados em %s com %d de recolhas de lixo."
             (format "%.2f segundos"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Configuração do sistema de pacotes

O Emacs tem um gerenciador de pacotes integrado, mas não facilita a instalação automática de pacotes em um novo sistema na primeira vez que você puxa sua configuração para baixo.  [[https://github.com/jwiegley/use-package][use-package]] é um pacote realmente útil utilizado nesta configuração para tornar muito mais fácil automatizar a instalação e configuração de tudo o mais que usamos.

#+begin_src emacs-lisp

  ;; Inicializar fontes de pacotes
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  ;; Buscar a lista de pacotes disponíveis
  (unless package-archive-contents (package-refresh-contents))

  ;; Inicializar o pacote-utilização em plataformas não-Linux
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Configuração do ambiente
Em alguns sistemas operacionais, o Emacs não carrega corretamente as variáveis do ambiente. Portanto, abaixo instalamos um pacote chamado ~exec-path-from-shell~ e o inicializamos.

 #+begin_src emacs-lisp

   ;; (use-package exec-path-from-shell :ensure t)
   ;; (exec-path-from-shell-initialize)

 #+end_src

* Configuração de variáveis específicas do sistema operacional
   Como queremos usar a mesma configuração emacs para cada um de nossos sistemas operacionais, queremos separar valores que são diferentes entre sistemas operacionais diferentes. Em minha configuração, tenho valores diferentes para ~JAVA_HOME~ em meu linux.el e mac.el. Ajuste estes valores de acordo com sua configuração se você estiver usando versões diferentes de Java. Seguindo o código carrega mac.el, linux.el ou windows.el com base no local onde você executa esta configuração.

#+BEGIN_SRC emacs-lisp
   ;; Carregar variáveis específicas da plataforma usando arquivos específicos.
   ;; Por exemplo, linux.el. Fazer as mudanças conforme a necessidade
   (cond ((eq system-type 'windows-nt) (load (concat EMACS_DIR "windows")))
   ((eq system-type 'gnu/linux) (load (concat EMACS_DIR "linux")))
   ((eq system-type 'darwin) (load (concat EMACS_DIR "mac")))
   (t (load-library "default")))
 #+END_SRC

* Configuração básica de IU

Esta seção configura configurações básicas de IU que removem elementos desnecessários para fazer o Emacs parecer muito mais simples e moderno.  Se estiver apenas começando no Emacs, a barra de menu pode ser útil. Assim, pode remover a linha =(menu-bar-mode -1)= se ainda quiser ver isso.

#+begin_src emacs-lisp

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)        ; desabilitar a barra de rolagem
    (tool-bar-mode -1)          ; desabilitar a barra de ferramentas
    (tooltip-mode -1)           ; desabilitar dicas de ferramentas
    (set-fringe-mode 10)        ; um espaço para respirar
    ;;(menu-bar-mode -1)        ; desabilitar a bara de menu

  ;; Definir o ambiente de linguagem para UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; Espaço em branco mais longo, caso contrário o destaque da sintaxe é limitado à coluna padrão
  (setq whitespace-line-column 1000) 

    ;; Colocar a campainha visível
    (setq visible-bell t)

    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Transparência do quadro definido
    (set-frame-parameter (selected-frame) 'alpha frame-transparency)
    (add-to-list 'default-frame-alist `(alpha . ,frame-transparency))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; Disabilitar números de linha para alguns modos
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    treemacs-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    ;; Dicas de ferramentas na área de eco
    (setq tooltip-use-echo-area t)

    (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Habilitar o envoltório macio
  (global-visual-line-mode 1)

    (show-paren-mode 1)

    (recentf-mode 1)

    ;; Salve um histórico das buscas que você inserir no minibuffer
    (setq history-length 25)
    (savehist-mode 1)

  ;; Codificação de configuração específica

  ;; Acrescentar automaticamente parênteses e suportes de fim
  (electric-pair-mode 1)

  ;; Certifique-se de que a largura da aba seja 4 e não 8
  (setq-default tab-width 4)

    ;; Lembrando o último lugar que você visitou em um arquivo
    (save-place-mode 1)

    ;; Evite o uso de diálogos de interface do usuário para obter solicitações
    (setq use-dialog-box nil)

    ;; Reverter automaticamente buffers para arquivos alterados
    (global-auto-revert-mode 1)

    ;; os buffers dired serão atualizados automaticamente quando os arquivos forem adicionados ou excluídos
    (setq global-auto-revert-non-file-buffers t)

  (setq ispell-program-name "C:/ProgramData/ezwinports/bin/hunspell")

#+end_src

*  Desativar ansi cor no modo de compilação
   Isto ajudará a eliminar as estranhas seqüências de fuga durante a compilação de projetos.
   
   #+begin_src emacs-lisp

     (defun my/ansi-colorize-buffer ()
     (let ((buffer-read-only nil))
     (ansi-color-apply-on-region (point-min) (point-max))))

     (use-package ansi-color
     :ensure t
     :config
     (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer))

   #+end_src

* Pacotes personalizados
  Nesta seção, instalaremos alguns dos pacotes que utilizaremos para vários projetos e gerenciamento de arquivos.

** Chave-Chord
   A tecla-Chord nos permite ligar teclas de teclado regulares para vários comandos sem ter que usar teclas de prefixo, tais como Ctrl, Alt ou Super etc.

   #+begin_src emacs-lisp

     (use-package use-package-chords
     :ensure t
     :init 
     :config (key-chord-mode 1)
     (setq key-chord-two-keys-delay 0.4)
     (setq key-chord-one-key-delay 0.5)) ; default 0.2
     ;; Aqui, mudamos o atraso para que a chave consecutiva fosse pouco maior do que o padrão. Ajuste isto para o que você se sentir confortável.

#+end_src

** Actualizações automáticas do pacote

O pacote de actualização automática manterá os Emacs actualizados!  Irá solicitar-lhe após um certo número de dias, quer no início, quer a uma hora específica do dia, para o lembrar de actualizar os seus pacotes.

Também pode usar =M-x auto-package-update-now= para atualizar agora mesmo!


#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Testando os pacotes
#+begin_src emacs-lisp
(use-package try :ensure t)
#+end_src

* Auto-completar
Uma extensão de conclusão automática inteligente para Emacs: -  [[https://github.com/auto-complete/auto-complete/tree/71dd984aa45dccea1cb797d336507eafa81b5bf4][auto-complete]]

#+begin_src emacs-lisp
        (use-package auto-complete
          :ensure t
          :init
          (ac-config-default)
          (global-auto-complete-mode t))
#+end_src

* Dashboard
Use the "dashboard" package for my startup screen.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)

    ;; Edits
    (setq dashboard-banner-logo-title "Bem vindo ao Emacs, Bruno!")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents   . 5)
                            (bookmarks . 5)
                            (agenda    . 5))))
#+END_SRC

* Manter as Pastas Limpas

Com o pacote [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] manterá limpas as pastas onde é editado os arquivos e a pasta de configuração do Emacs!  Conhece uma grande variedade de variáveis para as características construídas no Emacs, bem como as dos pacotes da comunidade, pelo que pode ser muito mais fácil do que encontrar e definir estas variáveis você mesmo.

#+begin_src emacs-lisp

  ;; NOTA: Se quiser mover tudo para fora da pasta ~/.emacs.d
  ;; definir de forma segura "user-emacs-directory" antes de carregar o no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; o "no-littering" não define isto por padrão, por isso temos de colocar
  ;; guardar arquivos automaticamente no mesmo caminho que utiliza para as sessões
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Configuração da fonte

Uso a fonte [[https://github.com/tonsky/FiraCode][Código Fira]] e [[https://fonts.google.com/specimen/Cantarell][Cantarell]] para esta configuração que, muito provavelmente, terá de ser instalada na sua máquina.  Ambas podem normalmente ser encontradas nos vários gestores de pacotes da distribuição Linux ou descarregadas a partir dos links acima.

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Fira Code Retina" :height default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height default-variable-font-size :weight 'regular)

#+end_src

* Configuração de teclas

Esta configuração utiliza [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] para uma experiência de edição modular semelhante ao Vi-like.  [[https://github.com/noctuid/general.el][general.el]]] é utilizada para uma configuração de teclas fácil de associar bem com which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]]] é usado para configurar automaticamente vários modos Emacs com teclas tipo Vi-like keybindings para o modo "maligno" (evil-mode).

#+begin_src emacs-lisp

  ;; Fazer ESC desistir instruções
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org")))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Usar movimentos de linha visual mesmo fora do buffer do visual-line-mode
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Configuração UI

** Ergoemacs

#+begin_src emacs-lisp

  ;;(use-package ergoemacs-mode
    ;;:ensure t
    ;;:config
    ;;(progn
      ;;(setq ergoemacs-theme nil)
      ;;(setq ergoemacs-keyboard-layout "us")
      ;;(ergoemacs-mode 1)))

#+end_src

** Ace-Window

#+begin_src emacs-lisp

  (use-package ace-window
    :ensure t
    :bind (("C-x w" . ace-window)))

#+end_src

** Modo de Registo de Comando

[[https://github.com/lewang/command-log-mode][command-log-mode]] é útil para exibir um painel mostrando cada uma das teclas que se utiliza num painel do lado direito da moldura.  Óptimo para transmissões ao vivo e screencasts!

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)

#+end_src

** Tema de cor

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] é um grande conjunto de temas com muita variedade e apoio para muitos modos Emacs diferentes.  Dando uma vista de olhos no [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] pode ajudá-lo a decidir qual deles gosta mais.  Também pode correr =M-x counsel-load-theme= para escolher facilmente entre eles.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-palenight t))

#+end_src

** Melhor Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] é uma configuração de linha de modo muito atraente e rica (mas ainda mínima) para Emacs.  A configuração padrão é bastante boa, mas pode consultar o [[https://github.com/seagle0128/doom-modeline#customize][opções de configuração]] para mais coisas que pode activar ou desactivar.

*NOTE:* A primeira vez que carregar a sua configuração numa nova máquina, terá de executar `M-x all-the-icons-install-fonts' para que os ícones de linha de modo exibam correctamente.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

** Which Key (Qual a chave mesmo?)

[[https://github.com/justbur/emacs-which-key][which-key]] é um painel de IU útil que aparece quando se começa a pressionar qualquer tecla de encadernação no Emacs para lhe oferecer todos os complementos possíveis para o prefixo.  Por exemplo, se premir =C-c= (mantenha premido o controlo e prima a letra =c=), aparecerá um painel na parte inferior da moldura exibindo todas as encadernações sob esse prefixo e qual o comando que elas executam.  Isto é muito útil para aprender as possíveis encadernações de teclas no modo do seu buffer actual.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel (Hera e Aconselhamento)

[[https://oremacs.com/swiper/][Ivy]] é um excelente quadro de conclusão para Emacs.  Fornece um menu de selecção mínimo mas poderoso que aparece quando se abrem ficheiros, se trocam buffers, e para muitas outras tarefas no Emacs.  Aconselhamento é um conjunto personalizado de comandos para substituir 'find-file' por 'counsel-find-file', etc., que fornecem comandos úteis para cada um dos comandos de conclusão padrão.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adiciona colunas extra a alguns dos comandos do Counsel para fornecer mais informações sobre cada item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** Selecção melhorada de candidatos com prescient.el

prescient.el fornece algum comportamento útil para classificar os candidatos à conclusão de Hera com base na sua selecção recente ou frequente.  Isto pode ser especialmente útil quando utiliza =M-x= para executar comandos que não está vinculado a uma chave mas que ainda precisa de aceder ocasionalmente.

Esta configuração Prescient está optimizada para utilização em vídeos e streams do System Crafters, consulte o [[https://youtu.be/T9kygXveEz0][vídeo em prescient.el]] para mais detalhes sobre como configurá-lo!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; A seguinte linha para ter a ordenação lembrada ao longo das sessões!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Comandos de Ajuda Útil

[[https://github.com/Wilfred/helpful][Útil]] adiciona muita informação muito útil (obtê-la?) a Emacs' =describe-= buffers de comando.  Por exemplo, se utilizar =describe-function=, não só obterá a documentação sobre a função, como também verá o código fonte da função e onde é utilizado noutros locais na configuração do Emacs.  É muito útil para descobrir como as coisas funcionam no Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Escala de texto

Este é um exemplo de utilização de [[https://github.com/abo-abo/hydra][Hydra]] para desenhar uma encadernação de chave transitória para ajustar rapidamente a escala do texto no ecrã.  Definimos uma hidra que é ligada a =C-s t s= e, uma vez activada, =j= e =k= aumenta e diminui a escala do texto.  Pode premir qualquer outra tecla (ou =f= especificamente) para sair do mapa de teclas transientes.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (efs/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Modo Org

[[https://orgmode.org/][Modo Org]] é uma das características distintivas do Emacs.  É um editor de documentos rico, planeador de projectos, rastreador de tarefas e tempo, motor de blogues, e utilitário de codificação literária, tudo embrulhado num único pacote.

** Melhores Font Faces

A função =efs/org-font-setup= configura várias faces de texto para ajustar os tamanhos dos cabeçalhos e usar fontes de largura variável na maioria dos casos, para que pareça mais que estamos a editar um documento em =org-mode=. Voltamos a usar fontes de largura fixa (monoespaço) para blocos de código e tabelas, para que sejam exibidas correctamente.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Substituir o hífen da lista por ponto
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Definir características para níveis de cabeçalho
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Assegurar que tudo o que deve ser fixado nos arquivos da Org aparece dessa forma
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Configuração básica

Esta secção contém a configuração básica para =org-mode= mais a configuração para agendas e modelos de captura da Org.  Há muito para desempacotar aqui, por isso recomendo que se veja os vídeos para [[https://youtu.be/VcgjTEa0kU4][Parte 5]] e [[https://youtu.be/PNE-mgkZ6HM][Parte 6]] para uma explicação completa.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Projects/OrgFiles/Tasks.org"
            "~/Projects/OrgFiles/Habits.org"
            "~/Projects/OrgFiles/Birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;;  Salve os Org buffers depois de preencher de novo!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Colocar aqui etiquetas de identificação exclusivas
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configurar vistas personalizadas da agenda
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; As ações seguintes de baixo esforço
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Projects/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Projects/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Projects/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Projects/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Projects/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))

#+end_src

*** Marcas de Cabeçalho Mais Agradáveis

[[https://github.com/sabof/org-bullets][org-bullets]] substitui o cabeçalho estrelas em =org-mode= buffers com caracteres de aspecto mais agradável que pode controlar.  Outra opção para isto é [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]], que podemos cobrir num vídeo posterior.

#+begin_src emacs-lisp

  ;; (use-package org-bullets
  ;;   :hook (org-mode . org-bullets-mode)
  ;;   :custom
  ;;   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Buffers de Org Centralizadas

Utilizamos [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] para centrar =org-mode= buffers para uma experiência de escrita mais agradável, uma vez que centraliza o conteúdo do buffer horizontalmente para parecer mais como se estivesse a editar um documento.  Isto é realmente uma questão de preferência pessoal para que possa remover o bloco abaixo se não gostar do comportamento.

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

*** Org-Roam2 (Second Brain)

#+begin_src emacs-lisp

  ;; Org-Roam basic configuration
  ;; O "(getenv "HOME")" substitui o uso do "~/"
    (setq org-directory (concat (getenv "HOME") "/MenteExterna"))

    (use-package org-roam
        :ensure t
        :init
        (setq org-roam-v2-ack t)
        :custom
        (org-roam-directory (file-truename org-directory))
        (org-roam-completion-everywhere t)
        (org-roam-capture-templates
         '(("d" "default" plain
            "%?"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
            :unnarrowed t)
           ("l" "programming language" plain
            "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t)
           ("b" "book notes" plain
            "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t)
           ("p" "project" plain
            "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
            :unnarrowed t)
           ("b" "book notes" plain
            (file "~/MenteExterna/Templates/BookNoteTemplate.org")
            :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t)))  
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)

               ("C-c n i" . org-roam-node-insert)
               :map org-mode-map
               ("C-M-i" . completion-at-point))
        :config
        (org-roam-setup))

#+end_src

*** Ajustes do modo org

#+begin_src emacs-lisp
        (use-package company-posframe
          :config
          (company-posframe-mode 1))

        ;; Melhorar a aparência do modo org
        (setq org-startup-indented t
                org-pretty-entities t
                org-hide-emphasis-markers t
                org-startup-with-inline-images t
                org-image-actual-width '(300))

        (use-package org-appear
          :hook (org-mode . org-appear-mode))

      (use-package org-superstar
            :config
            (setq org-superstar-special-todo-items t)
            (add-hook 'org-mode-hook (lambda ()
                                       (org-superstar-mode 1))))

    (plist-put org-format-latex-options :scale 2)

  (use-package olivetti
      :init
      (setq olivetti-body-width .67)
      :config
      (defun distraction-free ()
        "Distraction-free writing environment"
        (interactive)
        (if (equal olivetti-mode nil)
            (progn
              (window-configuration-to-register 1)
              (delete-other-windows)
              (text-scale-increase 2)
              (olivetti-mode t))
          (progn
            (jump-to-register 1)
            (olivetti-mode 0)
            (text-scale-decrease 2))))
      :bind
      (("<f9>" . distraction-free)))

(use-package deft
    :config
    (setq deft-directory org-directory
          deft-recursive t
          deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
          deft-use-filename-as-title t)
    :bind
    ("C-c n d" . deft))

#+end_src

*** Apresentação
#+begin_src emacs-lisp

  (use-package hide-mode-line)

  (defun efs/presentation-setup ()
    ;; Hide the mode line
    (hide-mode-line-mode 1)

    ;; Display images inline
    (org-display-inline-images) ;; Can also use org-startup-with-inline-images

    ;; Scale the text.  The next line is for basic scaling:
    (setq text-scale-mode-amount 2)
    (text-scale-mode 1))

    ;; This option is more advanced, allows you to scale other faces too
    ;; (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
    ;;                                    (org-verbatim (:height 1.75) org-verbatim)
    ;;                                    (org-block (:height 1.25) org-block))))

  (defun efs/presentation-end ()
    ;; Show the mode line again
    (hide-mode-line-mode 0)

    ;; Turn off text scale mode (or use the next line if you didn't use text-scale-mode)
    ;; (text-scale-mode 0))

    ;; If you use face-remapping-alist, this clears the scaling:
    (setq-local face-remapping-alist '((default variable-pitch default))))

  (use-package org-tree-slide
    :hook ((org-tree-slide-play . efs/presentation-setup)
           (org-tree-slide-stop . efs/presentation-end))
    :custom
    (org-tree-slide-slide-in-effect t)
    (org-tree-slide-activate-message "Presentation started!")
    (org-tree-slide-deactivate-message "Presentation finished!")
    (org-tree-slide-header t)
    (org-tree-slide-breadcrumbs " > ")
    (org-tree-slide-skip-outline-level 0)
    (org-image-actual-width nil))

(use-package ox-reveal
  :custom
  (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (org-reveal-mathjax t)

)
;; for syntax highlightng
(use-package htmlize)

(defun org-present-prepare-slide ()
  "Prepare slide."
  (org-overview)
  (org-show-entry)
  (org-show-children))

(defun org-present-prev ()
  "Previous slide."
  (interactive)
  (org-present-prev)
  (org-present-prepare-slide))

(defun org-present-next ()
  "Next slide."
  (interactive)
  (org-present-next)
  (org-present-prepare-slide))

(use-package org-present
  :bind (:map org-present-mode-keymap
         ("C-c C-j" . org-present-next)
         ("C-c C-k" . org-present-prev))
  :hook (
	 (org-present-mode . (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
         (org-present-mode-quit . (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))
	))

#+end_src

** Configurar as línguas Babel

Para executar ou exportar código em =org-mode= blocos de código, terá de configurar =org-babel-load-languages= para cada língua que gostaria de utilizar.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][Esta página]] documenta todas as línguas que pode utilizar com =org-babel=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
            (plantuml . t)
          (python . t)
          (java . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

#+end_src


** ob-java - funções org-babel para avaliação java

#+begin_src emacs-lisp
(require 'ob-java)
#+end_src

** Para tornar o ob-java consistente com o resto do babel

#+begin_src emacs-lisp

  ;; (setq org-babel-default-header-args:java
  ;;        '((:dir . nil)
  ;;          (:results . value)))

#+end_src


#+begin_src emacs-lisp

  (use-package plantuml-mode
    :config
    (setq org-plantuml-jar-path "~/plantuml.jar"))

#+end_src

#+begin_src plantuml :file ~/hello-uml.png
Bob -> Alice : Hello World!
#+end_src

#+RESULTS:
[[file:~/hello-uml.png]]

** Modelos de estrutura

A função Org Mode [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] permite-lhe inserir rapidamente blocos de código nos seus ficheiros Org em combinação com =org-tempo= digitando =<= seguido do nome do modelo como =el= ou =py= e depois prima =TAB=. Por exemplo, para inserir um bloco vazio =emacs-lisp= bloco abaixo, pode digitar =<el= e prima =TAB= para expandir para tal bloco.

Pode acrescentar mais =src= blocos de modelos abaixo, copiando uma das linhas e alterando as duas cordas no final, a primeira para ser o nome do modelo e a segunda para conter o nome da língua [[https://orgmode.org/worg/org-contrib/babel/languages.html][como é conhecida por Org Babel]].

#+begin_src emacs-lisp

    ;; Problema do Org-mode com o bloco src não se expandindo
    ;; Esta é uma correção para erros no modo org-mode onde <s TAB não expande o bloco SRC
    ;; (when (version<= "9.2" (org-version))
    ;;   (require 'org-tempo))

      (with-eval-after-load 'org
        ;; Isto é necessário a partir do Org 9.2
        (require 'org-tempo)

        (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
        (add-to-list 'org-structure-template-alist '("pl" . "src plantuml"))
        (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
        (add-to-list 'org-structure-template-alist '("py" . "src python"))
        (add-to-list 'org-structure-template-alist '("jv" . "src java")))


      ;; Configuração para ativar o destaque da sintaxe para os blocos de código
      (setf org-src-fontify-natively t)

#+end_src

** Ficheiros de configuração em Auto-tangle

Este trecho acrescenta um gancho a =org-mode= buffers de modo que =efs/org-babel-tangle-config= seja executado cada vez que um tal buffer é salvo.  Esta função verifica se o arquivo que está a ser guardado é o ficheiro config.org que está a ver neste momento, e se assim for, exporta automaticamente a configuração aqui para os ficheiros de saída associados.


#+begin_src emacs-lisp

  ;; Resolver automaticamente o nosso arquivo de configuração config.org quando o salvarmos
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


* Pomodoro

#+begin_src emacs-lisp

  (use-package org-pomodoro
        :ensure t
        :config
        ;; Persistent Clocking
        (setq org-clock-persist 'history)
        (org-clock-persistence-insinuate)

        ;; Default Table Params
        (setq org-clock-clocktable-default-properties '(:maxlevel 3 :scope subtree :tags "-Lunch"))


        ;; Org Pomodoro ;;
        ;; Setup pomodoro timer keybind
        (global-set-key (kbd "C-S-c C-S-p") 'org-pomodoro)
        (global-set-key (kbd "C-S-c C-S-e") 'org-pomodoro-extend-last-clock)

        (defun org-pomodoro-get-times ()
          (interactive)
          (message "work length: %s  short break: %s  long break: %s"
                   org-pomodoro-length
                   org-pomodoro-short-break-length
                   org-pomodoro-long-break-length))

        (defun org-pomodoro-set-pomodoro ()
          (interactive)
          (setf org-pomodoro-length 35)
          (setf org-pomodoro-short-break-length 9)
          (setf org-pomodoro-long-break-length 15))


        (org-pomodoro-set-pomodoro)

        (defun org-pomodoro-set-52-17 ()
          (interactive)
          (setf org-pomodoro-length 52)
          (setf org-pomodoro-short-break-length 17)
          (setf org-pomodoro-long-break-length 17)))

#+end_src

* Desenvolvimento

** Línguagens

*** Características IDE com lsp-mode

**** lsp-mode

Utilizamos o excelente [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] para permitir uma funcionalidade semelhante à IDE para muitas linguagens de programação diferentes através de "servidores de linguagem" que falam o [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Antes de tentar configurar =lsp-mode= para uma determinada língua, consulte a [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentação para a sua língua]] para que possa aprender que servidores de língua estão disponíveis e como instalá-los.

A configuração =lsp-keymap-prefix= permite-lhe definir um prefixo para onde =lsp-mode= serão adicionados os keybindings por defeito.  Recomendo vivamente* a utilização do prefixo para descobrir o que pode fazer com =lsp-mode= num buffer.

A =which-key= integração adiciona descrições úteis das várias teclas, pelo que deverá ser capaz de aprender muito apenas premindo =C-c l= num =lsp-mode= buffer e tentando diferentes coisas que aí encontra.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    ;; Estou testando
    ;; (setq lsp-completion-enable-additional-text-edit nil)
    )

#+end_src

****  lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] é um conjunto de melhoramentos da IU construído sobre =lsp-mode= que fazem o Emacs sentir-se ainda mais como uma IDE.  Veja os screenshots na página inicial de =lsp-ui= (ligada no início deste parágrafo) para ver exemplos do que pode fazer.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] fornece agradáveis vistas em árvore para diferentes aspectos do seu código, como símbolos num ficheiro, referências de um símbolo, ou mensagens de diagnóstico (erros e avisos) que são encontrados no seu código.

Experimente estes comandos com =M-x=:

- =lsp-treemacs-symbols= - Mostrar uma vista em árvore dos símbolos no ficheiro actual
- =lsp-treemacs-references= - Mostrar uma vista em árvore para as referências do símbolo sob o cursor
- =lsp-treemacs-error-list= - Mostrar uma vista em árvore para as mensagens de diagnóstico no projeto

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

***** [[https://github.com/Alexander-Miller/treemacs][Treemacs]]  - um explorador de arquivos de layout de árvore para Emacs

#+begin_src emacs-lisp

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integra Ivy com =lsp-mode= para facilitar a pesquisa de coisas pelo nome no seu código.  Quando executar estes comandos, aparecerá um prompt no mini-suffer permitindo-lhe digitar parte do nome de um símbolo no seu código.  Os resultados serão preenchidos no mini-auffer, para que possa encontrar o que procura e saltar para esse local no código ao seleccionar o resultado.

Tente estes comandos com =M-x=:

- =lsp-ivy-workspace-symbol=: - Procure o nome de um símbolo no espaço de trabalho do projecto actual
- =lsp-iv-global-workspace-symbol= - Procurar um nome simbólico em todos os espaços de trabalho activos do projecto

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

***  Depuração com dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] é um excelente pacote para trazer ao Emacs uma rica capacidade de depuração através do [[https://microsoft.github.io/debug-adapter-protocol/][Protocolo do Adaptador de Depuração]].  Deve consultar o [[https://emacs-lsp.github.io/dap-mode/page/configuration/][documentos de configuração]] para aprender a configurar o depurador para a sua língua.  Certifique-se também de verificar a documentação para o adaptador de depuração para ver que parâmetros de configuração estão disponíveis para utilizar para os seus modelos de depuração!

#+begin_src emacs-lisp

      (use-package dap-mode
        ;; Descomente a configuração abaixo se você quiser
        ;; que todas as janelas de IU sejam escondidas por padrão!
        ;; :custom
        ;; (lsp-enable-dap-auto-configure nil)
        ;; :config
        ;; (dap-ui-mode 1)
        :commands dap-debug
        :config
        ;; Configurar a depuração do nó
        (require 'dap-node)
        (dap-node-setup) ;; Instala automaticamente o adaptador de depuração do nó, se necessário

        ;; Ligar `C-c l d` a `dap-hydra` para fácil acesso
        (general-define-key
          :keymaps 'lsp-mode-map
          :prefix lsp-keymap-prefix
          "d" '(dap-hydra t :wk "debugger")))

#+end_src

*** Java, será!

#+begin_src emacs-lisp

  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))

#+end_src

*** Helm-lsp

#+begin_src emacs-lisp

  (use-package helm-lsp)

  (defun helm-or-evil-escape ()
    "Escape from anything."
    (interactive)
    (cond ((minibuffer-window-active-p (minibuffer-window))
           ;; quit the minibuffer if open.
           (abort-recursive-edit))
          ;; Run all escape hooks. If any returns non-nil, then stop there.
          ;; ((cl-find-if #'funcall doom-escape-hook))
          ;; don't abort macros
          ((or defining-kbd-macro executing-kbd-macro) nil)
          ;; Back to the default
          ((keyboard-quit))))

  (use-package helm-rg
    :ensure t)

  (use-package helm-projectile
    :ensure t
    :config
    (setq helm-bookmark-show-location t)
    (helm-projectile-on))
#+end_src

#+begin_src emacs-lisp
    ;; Torna a fuga do helm (e outros buffers) MUITO melhor
    (global-set-key [escape] #'helm-or-evil-escape)
#+end_src

** Helm
Helm permite a fácil conclusão dos comandos. Abaixo, vamos substituir várias das funções embutidas por versões de Helm e adicionar atalhos de teclado para alguns novos comandos úteis.
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind (([remap apropos]                     . helm-apropos)
           ([remap find-library]                . helm-locate-library)
           ([remap bookmark-jump]               . helm-bookmarks)
           ([remap execute-extended-command]    . helm-M-x)
           ([remap find-file]                   . helm-find-files)
           ([remap imenu-anywhere]              . helm-imenu-anywhere)
           ([remap imenu]                       . helm-semantic-or-imenu)
           ([remap noop-show-kill-ring]         . helm-show-kill-ring)
           ([remap persp-switch-to-buffer]      . helm-mini)
           ([remap switch-to-buffer]            . helm-buffers-list)
           ([remap projectile-find-file]        . helm-projectile-find-file)
           ([remap projectile-recentf]          . helm-projectile-recentf)
           ([remap projectile-switch-project]   . helm-projectile-switch-project)
           ([remap projectile-switch-to-buffer] . helm-projectile-switch-to-buffer)
           ([remap recentf-open-files]          . helm-recentf)
           :map helm-map
           ("C-h a"                             . helm-apropos)
           ("C-j"                               . helm-next-line)
           ("C-k"                               . helm-previous-line)
           ("<tab>"                             . helm-execute-persistent-action)
           ("C-i"                               . helm-execute-persistent-action)
           ("C-z"                               . helm-select-action)
           ("C-w"                               . backward-kill-word)
           ("C-a"                               . move-beginning-of-line)
           ("C-u"                               . backward-kill-sentence)
           ("C-b"                               . backward-word)
           ("C-f"                               . forward-word)
           ("C-r"                               . evil-paste-from-register)
           ("ESC"                               . abort-recursive-edit)
           ("C-S-j"                             . scroll-up-command)
           ("C-S-k"                             . scroll-down-command))

    :init
    (helm-mode 1)
    (setq
     helm-M-x-fuzzy-match                  t
     helm-ag-fuzzy-match                   t
     helm-apropos-fuzzy-match              t
     helm-apropos-fuzzy-match              t
     helm-bookmark-show-location           t
     helm-buffers-fuzzy-matching           t
     helm-completion-in-region-fuzzy-match t
     helm-completion-in-region-fuzzy-match t
     helm-ff-fuzzy-matching                t
     helm-file-cache-fuzzy-match           t
     helm-flx-for-helm-locate              t
     helm-imenu-fuzzy-match                t
     helm-lisp-fuzzy-completion            t
     helm-locate-fuzzy-match               t
     helm-mode-fuzzy-match                 t
     helm-projectile-fuzzy-match           t
     helm-recentf-fuzzy-match              t
     helm-semantic-fuzzy-match             t)
    :preface
    (add-hook 'helm-after-initialize-hook (lambda () (display-line-numbers-mode -1)))
    (setq helm-split-window-in-side-p nil         ; buffer de helm aberto dentro da janela atual
          helm-move-to-line-cycle-in-source t     ; mover-se para o fim ou início da fonte ao chegar ao topo ou ao fundo
          helm-ff-search-library-in-sexp t        ; busca de biblioteca em `require' e `declare-function' sexp
          helm-scroll-amount 8                    ; rolar 8 linhas em outra janela usando M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-echo-input-in-header-line t
          helm-candidate-number-limit 50
          helm-display-header-line nil
          helm-mode-line-string nil
          helm-ff-auto-update-initial-value nil
          helm-find-files-doc-header nil
          helm-display-buffer-default-width nil
          helm-display-buffer-default-height 0.25
          helm-split-window-default-side 'below)
    :config
    (require 'helm-config)
    (set-face-attribute 'helm-selection nil :foreground "black" :background "#9c91e4")
    (set-face-attribute 'helm-header-line-left-margin nil :background "unspecified")
    (set-face-attribute 'helm-candidate-number nil :background "unspecified" :foreground "white")
    (global-set-key (kbd "C-c h")   #'helm-command-prefix)
    (global-set-key (kbd "M-x")     #'helm-M-x)
    (global-set-key (kbd "C-s")     #'helm-swoop)
    (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (helm-mode +1))

  (use-package helm-swoop
    :ensure t
    :chords
    ("js" . helm-swoop)
    ("jp" . helm-swoop-back-to-last-point)
    :init
    (bind-key "M-m" 'helm-swoop-from-isearch isearch-mode-map)

    ;; If you prefer fuzzy matching
    (setq helm-swoop-use-fuzzy-match t)

    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t)

    ;; If this value is t, split window inside the current window
    (setq helm-swoop-split-with-multiple-windows nil)

    ;; Split direction. 'split-window-vertically or 'split-window-horizontally
    (setq helm-swoop-split-direction 'split-window-vertically)

    ;; If nil, you can slightly boost invoke speed in exchange for text color
    (setq helm-swoop-speed-or-color nil)

    ;; ;; Go to the opposite side of line from the end or beginning of line
    (setq helm-swoop-move-to-line-cycle t))

  (use-package helm-flx
    :ensure t
    :hook (helm-mode . helm-flx-mode)
    :config (helm-flx-mode +1))

  ;; flx
  (use-package flx
    :ensure t)

#+end_src

*** TypeScript

Esta é uma configuração básica para a linguagem TypeScript para que =.ts= arquivos ativados =typescript-mode= quando abertos.  Também estamos adicionando um gancho para =typescript-mode-hook= para chamar =lsp-deferred= para que ativemos =lsp-mode= para obter recursos LSP toda vez que editarmos o código TypeScript.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Nota importante!* Para =lsp-mode= para trabalhar com TypeScript (e JavaScript) você precisará instalar um servidor de linguagem em sua máquina.  Se você tiver o Node.js instalado, a maneira mais fácil de fazer isso é executando o seguinte comando:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

Isto instalará o [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] e o pacote do compilador TypeScript.

*** Python

Usamos =lsp-mode= e =dap-mode= para fornecer um ambiente de desenvolvimento mais completo para Python no Emacs.  Confira [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] no =lsp-mode= documentação para mais detalhes.

Verifique se você tem o =pyls= servidor de linguagem instalado antes de tentar =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-language-server[all]"

#+end_src

Existem vários outros servidores de linguagem para Python, então se você descobrir que =pyls= não funciona para você, consulte o =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentação de configuração de linguagem]] para tentar os outros!

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; OBSERVAÇÃO: Defina estes se Python 3 for chamado de "python3" em seu sistema!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))


#+end_src

Você pode usar o pacote pyvenv para usar =virtualenv= ambientes em Emacs.  O comando =pyvenv-activate= deve configurar o Emacs para causar =lsp-mode= e =dap-mode= para usar o ambiente virtual quando forem carregados, basta selecionar o caminho para seu ambiente virtual antes de carregar seu projeto.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

** Company Mode (Modo Empresa)

[[http://company-mode.github.io/][Modo Empresa]] fornece uma interface mais agradável de conclusão no tampão do que =completion-at-point= que lembra mais o que você esperaria de uma IDE.  Acrescentamos uma configuração simples para tornar as ligações de chaves um pouco mais úteis (=TAB= agora completa a seleção e inicia a conclusão no local atual, se necessário).

Também usamos [[https://github.com/sebastiencs/company-box][company-box]] para melhorar ainda mais a aparência dos complementos com ícones e uma melhor apresentação geral.

#+begin_src emacs-lisp

    (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
             ("<tab>" . company-complete-selection))
            (:map lsp-mode-map
             ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))

  ;; Auto completion
    (use-package company
      :config
      (setq company-idle-delay 0
            company-minimum-prefix-length 4
            company-selection-wrap-around t))
    (global-company-mode)

    (use-package company-box
      :hook (company-mode . company-box-mode))

    ;; (setq company-auto-complete t)

    ;;   (defun my-company-visible-and-explicit-action-p ()
    ;;   (and (company-tooltip-visible-p)
    ;;        (company-explicit-action-p)))

    ;; (defun company-ac-setup ()
    ;;   "Sets up `company-mode' to behave similarly to `auto-complete-mode'."
    ;;   (setq company-require-match nil)
    ;;   (setq company-auto-complete #'my-company-visible-and-explicit-action-p)
    ;;   (setq company-frontends '(company-echo-metadata-frontend
    ;;                             company-pseudo-tooltip-unless-just-one-frontend-with-delay
    ;;                             company-preview-frontend)))

    ;;  (company-ac-setup)

#+end_src

** Projectile (Projétil)

[[https://projectile.mx/][Projectile]] é uma biblioteca de gerenciamento de projetos para Emacs que facilita muito a navegação em projetos de código para vários idiomas.  Muitos pacotes se integram com o Projectile, portanto é uma boa idéia tê-la instalada mesmo que você não use seus comandos diretamente.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; OBSERVAÇÃO: Coloque isto na pasta onde você mantém seu repositório Git!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** [[https://www.flycheck.org/en/latest/][Flycheck]] extensão moderna de verificação de sintaxe on-the-fly para GNU Emacs

#+begin_src emacs-lisp

  (use-package flycheck)

#+end_src

** [[https://github.com/joaotavora/yasnippet][YASnippet]] é um sistema de modelos para Emacs. Ele permite que você digite uma abreviação e expanda-a automaticamente em modelos de função

#+begin_src emacs-lisp

  (use-package yasnippet :config (yas-global-mode))

#+end_src

**  Magit

[[https://magit.vc/][Magit]] é a melhor interface Git que eu já usei.  As operações comuns de Git são fáceis de executar rapidamente usando o sistema de painel de comando Magit.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTA: Certifique-se de configurar um token GitHub antes de usar este pacote!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Comentando

A funcionalidade de comentário do Emacs =comment-dwim= (geralmente vinculado a =M-;=) nem sempre comenta as coisas da maneira que você poderia esperar, então usamos [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] para fornecer um comportamento mais familiar.  Eu o limitei a =M-/= já que outros editores às vezes usam esta ligação, mas você também poderia substituir Emacs' =M-;= ligação por este comando.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Smart Parens

#+begin_src emacs-lisp

  (use-package smartparens
    :diminish smartparens-mode ;; Do not show in modeline
    :init
    (require 'smartparens-config)
    :config
    (smartparens-global-mode t) ;; These options can be t or nil.
    (show-smartparens-global-mode t)
    (setq sp-show-pair-from-inside t)
    :custom-face
    (sp-show-pair-match-face ((t (:foreground "White")))) ;; Could also have :background "Grey" for example.
    )
#+end_src

** Rainbow Delimiters (Delimitadores Arco-Íris)

[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] é útil nos modos de programação porque coloriza os parênteses e parênteses aninhados de acordo com sua profundidade de aninhamento.  Isto facilita muito a correspondência visual de parênteses no código Emacs Lisp sem a necessidade de contá-los você mesmo.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Terminais

** modo termo-modalidade

=term-mode= é um emulador de terminal embutido no Emacs.  Como está escrito no Emacs Lisp, você pode começar a usá-lo imediatamente com muito pouca configuração.  Se você estiver em Linux ou macOS, =term-mode= é uma ótima escolha para começar, pois suporta aplicações de terminal bastante complexas (=htop=, =vim=, etc.) e funciona de forma bastante confiável.  Entretanto, por ser escrito no Emacs Lisp, ele pode ser mais lento que outras opções como =vterm=. A velocidade só será um problema se você executar regularmente aplicativos de console com muita saída.

Uma coisa importante a entender é =line-mode= versus =char-mode=. =line-mode= permite que você use teclas Emacs normais enquanto se move no buffer do terminal enquanto =char-mode= envia a maior parte de suas teclas para o terminal subjacente.  Ao usar =term-mode=, você desejará estar em =char-mode= para qualquer aplicação terminal que tenha suas próprias ligações de chave.  Se você estiver apenas em seu shell habitual, =line-mode= é suficiente e se sente mais integrado com o Emacs.

Com =evil-collection= instalado, você mudará automaticamente para =char-mode= quando entrar no modo de inserção do Evil (pressione =i=).  Você voltará automaticamente para =line-mode= quando entrar no modo normal do Evil (pressione =ESC=).

Execute um terminal com =M-x termo!=

*Atenções de teclas úteis:*

- =C-c C-p= / =C-c C-n= - volte e avance nos avisos do buffer (também =[[= e =]]= com modo do mal)
- =C-c C-k= - Entrar no modo char-mode
- =C-c C-j= - Retorno ao modo de linha
- Se você tiver =evil-collection= instalado, =term-mode= entrará em modo char quando você usar o modo Insert do Evil

#+begin_src emacs-lisp

      (use-package term
        :commands term
        :config
        (setq explicit-shell-file-name "bash") ;; Mude isto para zsh, etc.
        ;;(setq explicit-zsh-args '())
        ;; Use 'explicit-<shell>-args para Args específicos do shell

        ;; Corresponder ao prompt padrão do Bash shell.
        ;; Atualize isto se você tiver um prompt personalizado
        (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Melhores cores no term-mode

O pacote =eterm-256color= aumenta a saída de =term-mode= para permitir o manuseio de uma gama mais ampla de códigos de cores, de modo que muitas aplicações de terminais populares tenham a aparência que você esperaria que tivessem.  Tenha em mente que este pacote requer =ncurses= para ser instalado em sua máquina para que ela tenha acesso ao programa =tic=.  A maioria das distribuições Linux já vem com este programa instalado, portanto você pode não ter que fazer nada a mais para usá-lo.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] é um pacote emulador de terminal melhorado que utiliza um módulo nativo compilado para interagir com as aplicações terminais subjacentes.  Isto permite que ele seja muito mais rápido do que =term-mode= e que também forneça uma experiência mais completa de emulação de terminal.

Certifique-se de que você tenha o [[https://github.com/akermu/emacs-libvterm/#requirements][dependências necessárias]] instalado antes de tentar usar =vterm= porque existe um módulo que precisará ser compilado antes que você possa usá-lo com sucesso.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Defina isto para combinar com seu prompt de shell personalizado
    ;;(setq vterm-shell "zsh")                       ;; Configure isto para personalizar o shell para lançar
    (setq vterm-max-scrollback 10000))

#+end_src

** modo shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]]] é um meio termo entre =term-mode= e Eshell.  É *não* um emulador de terminal, portanto, programas terminais mais complexos não funcionarão dentro dele.  Ele tem uma integração muito melhor com o Emacs porque toda a entrada de comando neste modo é tratada pelo Emacs e então enviada para a shell subjacente uma vez que você pressione Enter.  Isto significa que você pode usar =evil-mode='s editing motions na linha de comando, ao contrário dos modos de emulador de terminal acima.

*Atenções de teclas úteis:*

- =C-c C-p= / =C-c C-n= - voltar e avançar nas instruções do buffer (também =[[= e =]]= com modo maligno)
- =M-p= / =M-n= - voltar e avançar no histórico de entrada
- =C-c C-u= - apagar a cadeia de entrada atual para trás, até o cursor
- =counsel-shell-history= - Um histórico pesquisável de comandos digitados na casca

Uma vantagem de =shell-mode= no Windows é que é a única maneira de executar =cmd.exe=, PowerShell, Git Bash, etc. dentro do Emacs.  Aqui está um exemplo de como você configuraria =shell-mode= para rodar o PowerShell no Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] é a própria implementação da casca do Emacs escrita no Emacs Lisp.  Ele fornece a você uma implementação multiplataforma (mesmo no Windows!) dos utilitários GNU comuns que você encontrará no Linux e macOS (=ls=, =rm=, =mv=, =grep=, etc).  Ele também permite chamar as funções Emacs Lisp diretamente da shell e você pode até mesmo configurar aliases (como aliasing =vim= a =find-file=).  Eshell é também um Emacs Lisp REPL que lhe permite avaliar expressões completas na shell.

As desvantagens do Eshell são que pode ser mais difícil configurar do que outros pacotes devido à particularidade de onde você precisa definir algumas opções para que elas entrem em vigor, a falta de completações shell (por padrão) para algumas coisas úteis como comandos Git, e que os programas REPL às vezes não funcionam tão bem.  Entretanto, muitas destas limitações podem ser resolvidas através de uma boa configuração e instalação de pacotes externos, portanto não deixe que isso o desencoraje de tentar!

*Atenções de teclas úteis:*

- =C-c C-p= / =C-c C-n= - voltar e avançar nos avisos do buffer (também =[[= e =]]= com modo maligno)
- =M-p= / =M-n= - voltar e avançar no histórico de entrada
- =C-c C-u= - apagar a cadeia de entrada atual para trás, até o cursor
- =counsel-esh-history= - Um histórico pesquisável de comandos digitados no Eshell

Cobriremos mais o Eshell em vídeos futuros destacando outras coisas que você pode fazer com ele.

Para mais pensamentos sobre o Eshell, confira estes artigos de Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun efs/configure-eshell ()
    ;; Salvar o histórico de comandos quando os comandos são inseridos
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Buffer truncado para desempenho
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Ligar algumas chaves úteis para evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

* Gerenciamento de arquivos

** Dired

Dired é um gerenciador de arquivos embutido para o Emacs que faz algumas coisas incríveis!  Aqui estão algumas ligações chave que você deve experimentar:

*** Encadernações de chaves

**** Navegação

*Emacs* / *Evil*
- =n= / =j= - próxima linha
- =p= / =k= - linha anterior
- =j= / =J= - saltar para arquivo em buffer
- =RET= - selecione arquivo ou diretório
- =^= - ir para o diretório dos pais
- =S-RET= / =g O= - Abrir arquivo na janela "outros
- =M-RET= - Mostrar arquivo em outra janela sem focalizar (pré-visualização de arquivos)
- =g o= (=dired-view-file=) - Abrir arquivo, mas em modo "preview", fechar com =q=
- =g= / =g r= Atualize o buffer com =revert-buffer= após alterar a configuração (e após mudanças no sistema de arquivos!)

**** Marcação de arquivos

- =m= - Marca um arquivo
- =u= - Desmarca um arquivo
- =U= - Desmarca todos os arquivos em buffer
- =* t= / =t= - Inverte arquivos marcados em buffer
- =% m= - Marcar arquivos em buffer usando expressão regular
- =*= - Muitas outras funções de auto-marcação
- =k= / =K= - "Kill" itens marcados (refresh buffer com =g= / =g r= para recuperá-los)
- Muitas operações podem ser feitas em um único arquivo se não houver marcas ativas!

**** Cópia e renomeação de arquivos

- =C= - Copiar arquivos marcados (ou se nenhum arquivo estiver marcado, o arquivo atual)
- Cópia de arquivos simples e múltiplos
- =U= - Desmarcar todos os arquivos em buffer
- =R= - Renomear arquivos marcados, renomear múltiplos é um movimento!
- =% R= - Renomear baseado na expressão regular: =^test= , =old-\&=

*Comando de potência*: =C-x C-q= (=dired-toggle-readly=) - Torna todos os nomes de arquivos no buffer editáveis diretamente para renomeá-los!  Pressione =Z Z= para confirmar a renomeação ou =Z Q= para abortar.

**** Eliminação de arquivos

- =D= - Apagar arquivo marcado
- =d= - Marcar arquivo para eliminação
- =x= - Executar eliminação para marcas
- =delete-by-moving-to-trash= - Mover-se para o lixo em vez de eliminar permanentemente

**** Criação e extração de arquivos

- =Z= - Comprimir ou descomprimir um arquivo ou pasta para (=.tar.gz=)
- =c= - Comprimir a seleção para um arquivo específico
- =dired-compress-files-alist= - Comandos de compressão Bind para extensão de arquivo

**** Outras operações comuns

- =T= - Toque (mudar o carimbo do tempo)
- =M= - Alterar o modo de arquivo
- =O= - Mudar o proprietário do arquivo
- =G= - Alterar grupo de arquivos
- =S= - Criar um link simbólico para este arquivo
- =L= - Carregar um arquivo Emacs Lisp no Emacs

*** Configuração

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Não funciona como esperado!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Aplicações

** Alguns aplicativos

Este é um exemplo de configuração de outra aplicação não-Emacs usando o modo org-mode.  Não apenas escrevemos a configuração em =.config/some-app/config=, mas também calculamos o valor que é armazenado nesta configuração a partir do bloco Emacs Lisp acima dele.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src


*NOTE*: Defina o =:tangle= parâmetro abaixo para =.config/some-app/config= para que isto funcione!

#+begin_src conf :tangle no :noweb yes

  value=<<the-value()>>

#+end_src

* Desempenho em tempo de execução

Disque o limiar de GC novamente para baixo para que a coleta de lixo aconteça com mais freqüência, mas em menos tempo.

#+begin_src emacs-lisp

  ;; Faça as pausas do gc mais rápidas diminuindo o limite.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
